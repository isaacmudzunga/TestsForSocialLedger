/*
 * WeShare API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Applications.Weshare.Swagger.Client;
using Applications.Weshare.Swagger.Model;

namespace Applications.Weshare.Swagger.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeopleApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find all people that use WeShare
        /// </summary>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Person&gt;</returns>
        List<Person> FindAllPeople(int operationIndex = 0);

        /// <summary>
        /// Find all people that use WeShare
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Person&gt;</returns>
        ApiResponse<List<Person>> FindAllPeopleWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Find a person by ID
        /// </summary>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">The ID of the person</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Person</returns>
        Person FindPersonById(int personId, int operationIndex = 0);

        /// <summary>
        /// Find a person by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">The ID of the person</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Person</returns>
        ApiResponse<Person> FindPersonByIdWithHttpInfo(int personId, int operationIndex = 0);
        /// <summary>
        /// Login to WeShare
        /// </summary>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginDTO"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Person</returns>
        Person Login(LoginDTO? loginDTO = default(LoginDTO?), int operationIndex = 0);

        /// <summary>
        /// Login to WeShare
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginDTO"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Person</returns>
        ApiResponse<Person> LoginWithHttpInfo(LoginDTO? loginDTO = default(LoginDTO?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeopleApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Find all people that use WeShare
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Person&gt;</returns>
        System.Threading.Tasks.Task<List<Person>> FindAllPeopleAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find all people that use WeShare
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Person&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Person>>> FindAllPeopleWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find a person by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">The ID of the person</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Person</returns>
        System.Threading.Tasks.Task<Person> FindPersonByIdAsync(int personId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find a person by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">The ID of the person</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Person)</returns>
        System.Threading.Tasks.Task<ApiResponse<Person>> FindPersonByIdWithHttpInfoAsync(int personId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Login to WeShare
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginDTO"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Person</returns>
        System.Threading.Tasks.Task<Person> LoginAsync(LoginDTO? loginDTO = default(LoginDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Login to WeShare
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginDTO"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Person)</returns>
        System.Threading.Tasks.Task<ApiResponse<Person>> LoginWithHttpInfoAsync(LoginDTO? loginDTO = default(LoginDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeopleApi : IPeopleApiSync, IPeopleApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PeopleApi : IPeopleApi
    {
        private Applications.Weshare.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PeopleApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PeopleApi(string basePath)
        {
            this.Configuration = Applications.Weshare.Swagger.Client.Configuration.MergeConfigurations(
                Applications.Weshare.Swagger.Client.GlobalConfiguration.Instance,
                new Applications.Weshare.Swagger.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Applications.Weshare.Swagger.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Applications.Weshare.Swagger.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Applications.Weshare.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PeopleApi(Applications.Weshare.Swagger.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Applications.Weshare.Swagger.Client.Configuration.MergeConfigurations(
                Applications.Weshare.Swagger.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Applications.Weshare.Swagger.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Applications.Weshare.Swagger.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Applications.Weshare.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PeopleApi(Applications.Weshare.Swagger.Client.ISynchronousClient client, Applications.Weshare.Swagger.Client.IAsynchronousClient asyncClient, Applications.Weshare.Swagger.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Applications.Weshare.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Applications.Weshare.Swagger.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Applications.Weshare.Swagger.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Applications.Weshare.Swagger.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Applications.Weshare.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Find all people that use WeShare 
        /// </summary>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Person&gt;</returns>
        public List<Person> FindAllPeople(int operationIndex = 0)
        {
            Applications.Weshare.Swagger.Client.ApiResponse<List<Person>> localVarResponse = FindAllPeopleWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find all people that use WeShare 
        /// </summary>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Person&gt;</returns>
        public Applications.Weshare.Swagger.Client.ApiResponse<List<Person>> FindAllPeopleWithHttpInfo(int operationIndex = 0)
        {
            Applications.Weshare.Swagger.Client.RequestOptions localVarRequestOptions = new Applications.Weshare.Swagger.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Applications.Weshare.Swagger.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Applications.Weshare.Swagger.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PeopleApi.FindAllPeople";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Person>>("/people", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAllPeople", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find all people that use WeShare 
        /// </summary>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Person&gt;</returns>
        public async System.Threading.Tasks.Task<List<Person>> FindAllPeopleAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Applications.Weshare.Swagger.Client.ApiResponse<List<Person>> localVarResponse = await FindAllPeopleWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find all people that use WeShare 
        /// </summary>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Person&gt;)</returns>
        public async System.Threading.Tasks.Task<Applications.Weshare.Swagger.Client.ApiResponse<List<Person>>> FindAllPeopleWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Applications.Weshare.Swagger.Client.RequestOptions localVarRequestOptions = new Applications.Weshare.Swagger.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Applications.Weshare.Swagger.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Applications.Weshare.Swagger.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PeopleApi.FindAllPeople";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Person>>("/people", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAllPeople", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find a person by ID 
        /// </summary>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">The ID of the person</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Person</returns>
        public Person FindPersonById(int personId, int operationIndex = 0)
        {
            Applications.Weshare.Swagger.Client.ApiResponse<Person> localVarResponse = FindPersonByIdWithHttpInfo(personId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find a person by ID 
        /// </summary>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">The ID of the person</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Person</returns>
        public Applications.Weshare.Swagger.Client.ApiResponse<Person> FindPersonByIdWithHttpInfo(int personId, int operationIndex = 0)
        {
            Applications.Weshare.Swagger.Client.RequestOptions localVarRequestOptions = new Applications.Weshare.Swagger.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Applications.Weshare.Swagger.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Applications.Weshare.Swagger.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Applications.Weshare.Swagger.Client.ClientUtils.ParameterToString(personId)); // path parameter

            localVarRequestOptions.Operation = "PeopleApi.FindPersonById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Person>("/api/people/{personId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindPersonById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find a person by ID 
        /// </summary>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">The ID of the person</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Person</returns>
        public async System.Threading.Tasks.Task<Person> FindPersonByIdAsync(int personId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Applications.Weshare.Swagger.Client.ApiResponse<Person> localVarResponse = await FindPersonByIdWithHttpInfoAsync(personId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find a person by ID 
        /// </summary>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">The ID of the person</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Person)</returns>
        public async System.Threading.Tasks.Task<Applications.Weshare.Swagger.Client.ApiResponse<Person>> FindPersonByIdWithHttpInfoAsync(int personId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Applications.Weshare.Swagger.Client.RequestOptions localVarRequestOptions = new Applications.Weshare.Swagger.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Applications.Weshare.Swagger.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Applications.Weshare.Swagger.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Applications.Weshare.Swagger.Client.ClientUtils.ParameterToString(personId)); // path parameter

            localVarRequestOptions.Operation = "PeopleApi.FindPersonById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Person>("/api/people/{personId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindPersonById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login to WeShare 
        /// </summary>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginDTO"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Person</returns>
        public Person Login(LoginDTO? loginDTO = default(LoginDTO?), int operationIndex = 0)
        {
            Applications.Weshare.Swagger.Client.ApiResponse<Person> localVarResponse = LoginWithHttpInfo(loginDTO);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login to WeShare 
        /// </summary>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginDTO"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Person</returns>
        public Applications.Weshare.Swagger.Client.ApiResponse<Person> LoginWithHttpInfo(LoginDTO? loginDTO = default(LoginDTO?), int operationIndex = 0)
        {
            Applications.Weshare.Swagger.Client.RequestOptions localVarRequestOptions = new Applications.Weshare.Swagger.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Applications.Weshare.Swagger.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Applications.Weshare.Swagger.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = loginDTO;

            localVarRequestOptions.Operation = "PeopleApi.Login";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Person>("/api/people", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Login", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login to WeShare 
        /// </summary>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginDTO"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Person</returns>
        public async System.Threading.Tasks.Task<Person> LoginAsync(LoginDTO? loginDTO = default(LoginDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Applications.Weshare.Swagger.Client.ApiResponse<Person> localVarResponse = await LoginWithHttpInfoAsync(loginDTO, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login to WeShare 
        /// </summary>
        /// <exception cref="Applications.Weshare.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginDTO"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Person)</returns>
        public async System.Threading.Tasks.Task<Applications.Weshare.Swagger.Client.ApiResponse<Person>> LoginWithHttpInfoAsync(LoginDTO? loginDTO = default(LoginDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Applications.Weshare.Swagger.Client.RequestOptions localVarRequestOptions = new Applications.Weshare.Swagger.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Applications.Weshare.Swagger.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Applications.Weshare.Swagger.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = loginDTO;

            localVarRequestOptions.Operation = "PeopleApi.Login";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Person>("/api/people", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Login", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
