/*
 * WeShare API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Applications.Weshare.Swagger.Client.OpenAPIDateConverter;

namespace Applications.Weshare.Swagger.Model
{
    /// <summary>
    /// NewExpenseDTO
    /// </summary>
    [DataContract(Name = "NewExpenseDTO")]
    public partial class NewExpenseDTO : IEquatable<NewExpenseDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewExpenseDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewExpenseDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewExpenseDTO" /> class.
        /// </summary>
        /// <param name="personId">personId.</param>
        /// <param name="date">date.</param>
        /// <param name="description">description.</param>
        /// <param name="amount">amount (required).</param>
        public NewExpenseDTO(int personId = default(int), string date = default(string), string description = default(string), long amount = default(long))
        {
            this.Amount = amount;
            this.PersonId = personId;
            this.Date = date;
            this.Description = description;
        }

        /// <summary>
        /// Gets or Sets PersonId
        /// </summary>
        [DataMember(Name = "personId", EmitDefaultValue = false)]
        public int PersonId { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public long Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NewExpenseDTO {\n");
            sb.Append("  PersonId: ").Append(PersonId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewExpenseDTO);
        }

        /// <summary>
        /// Returns true if NewExpenseDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of NewExpenseDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewExpenseDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PersonId == input.PersonId ||
                    this.PersonId.Equals(input.PersonId)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PersonId.GetHashCode();
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
