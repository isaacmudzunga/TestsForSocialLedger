/*
 * WeShare API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Applications.Weshare.Swagger.Client.OpenAPIDateConverter;

namespace Applications.Weshare.Swagger.Model
{
    /// <summary>
    /// PaymentRequestDTO
    /// </summary>
    [DataContract(Name = "PaymentRequestDTO")]
    public partial class PaymentRequestDTO : IEquatable<PaymentRequestDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRequestDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentRequestDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRequestDTO" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="expenseId">expenseId.</param>
        /// <param name="fromPersonId">fromPersonId.</param>
        /// <param name="toPersonId">toPersonId.</param>
        /// <param name="date">date.</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="paid">paid (required).</param>
        public PaymentRequestDTO(int id = default(int), int expenseId = default(int), int fromPersonId = default(int), int toPersonId = default(int), string date = default(string), long amount = default(long), bool paid = default(bool))
        {
            this.Amount = amount;
            this.Paid = paid;
            this.Id = id;
            this.ExpenseId = expenseId;
            this.FromPersonId = fromPersonId;
            this.ToPersonId = toPersonId;
            this.Date = date;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseId
        /// </summary>
        [DataMember(Name = "expenseId", EmitDefaultValue = false)]
        public int ExpenseId { get; set; }

        /// <summary>
        /// Gets or Sets FromPersonId
        /// </summary>
        [DataMember(Name = "fromPersonId", EmitDefaultValue = false)]
        public int FromPersonId { get; set; }

        /// <summary>
        /// Gets or Sets ToPersonId
        /// </summary>
        [DataMember(Name = "toPersonId", EmitDefaultValue = false)]
        public int ToPersonId { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public long Amount { get; set; }

        /// <summary>
        /// Gets or Sets Paid
        /// </summary>
        [DataMember(Name = "paid", IsRequired = true, EmitDefaultValue = true)]
        public bool Paid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentRequestDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ExpenseId: ").Append(ExpenseId).Append("\n");
            sb.Append("  FromPersonId: ").Append(FromPersonId).Append("\n");
            sb.Append("  ToPersonId: ").Append(ToPersonId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Paid: ").Append(Paid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentRequestDTO);
        }

        /// <summary>
        /// Returns true if PaymentRequestDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentRequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRequestDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ExpenseId == input.ExpenseId ||
                    this.ExpenseId.Equals(input.ExpenseId)
                ) && 
                (
                    this.FromPersonId == input.FromPersonId ||
                    this.FromPersonId.Equals(input.FromPersonId)
                ) && 
                (
                    this.ToPersonId == input.ToPersonId ||
                    this.ToPersonId.Equals(input.ToPersonId)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Paid == input.Paid ||
                    this.Paid.Equals(input.Paid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpenseId.GetHashCode();
                hashCode = (hashCode * 59) + this.FromPersonId.GetHashCode();
                hashCode = (hashCode * 59) + this.ToPersonId.GetHashCode();
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.Paid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
